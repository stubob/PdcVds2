===== prisma/migrations/20250327205634_race_result_sequence/migration.sql =====
-- AlterTable
ALTER TABLE "race_result" ADD COLUMN     "sequence" INTEGER NOT NULL DEFAULT 0;
===== prisma/migrations/migration_lock.toml =====
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"===== prisma/migrations/20250314153229_init/migration.sql =====
-- CreateTable
CREATE TABLE "rider" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,
    "name_key" TEXT NOT NULL,
    "nation" TEXT NOT NULL,
    "team_key" TEXT NOT NULL,
    "age" INTEGER NOT NULL,
    "price_2025" INTEGER NOT NULL,
    "score_2025" INTEGER NOT NULL,
    "score_2024" INTEGER NOT NULL,
    "type" BOOLEAN NOT NULL,

    CONSTRAINT "rider_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "draft_team" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,
    "type" BOOLEAN NOT NULL,
    "year" TEXT NOT NULL,
    "user_id" TEXT NOT NULL,

    CONSTRAINT "draft_team_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "draft_team_riders" (
    "id" SERIAL NOT NULL,
    "rider_id" INTEGER NOT NULL,
    "user_id" TEXT NOT NULL,
    "team_id" INTEGER NOT NULL,

    CONSTRAINT "draft_team_riders_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "race" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,
    "name_key" TEXT NOT NULL,
    "nation" TEXT NOT NULL,
    "date" TIMESTAMP(3) NOT NULL,
    "type" BOOLEAN NOT NULL,
    "category" TEXT NOT NULL,

    CONSTRAINT "race_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "race_result" (
    "id" SERIAL NOT NULL,
    "rider_id" INTEGER NOT NULL,
    "position" INTEGER NOT NULL,
    "race_id" INTEGER NOT NULL,

    CONSTRAINT "race_result_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "name" TEXT,
    "email" TEXT NOT NULL,
    "emailVerified" TIMESTAMP(3),
    "image" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Account" (
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refresh_token" TEXT,
    "access_token" TEXT,
    "expires_at" INTEGER,
    "token_type" TEXT,
    "scope" TEXT,
    "id_token" TEXT,
    "session_state" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Account_pkey" PRIMARY KEY ("provider","providerAccountId")
);

-- CreateTable
CREATE TABLE "Session" (
    "sessionToken" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL
);

-- CreateTable
CREATE TABLE "VerificationToken" (
    "identifier" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "VerificationToken_pkey" PRIMARY KEY ("identifier","token")
);

-- CreateTable
CREATE TABLE "Authenticator" (
    "credentialID" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "credentialPublicKey" TEXT NOT NULL,
    "counter" INTEGER NOT NULL,
    "credentialDeviceType" TEXT NOT NULL,
    "credentialBackedUp" BOOLEAN NOT NULL,
    "transports" TEXT,

    CONSTRAINT "Authenticator_pkey" PRIMARY KEY ("userId","credentialID")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");

-- CreateIndex
CREATE UNIQUE INDEX "Authenticator_credentialID_key" ON "Authenticator"("credentialID");

-- AddForeignKey
ALTER TABLE "draft_team" ADD CONSTRAINT "draft_team_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "User"("id") ON DELETE NO ACTION ON UPDATE NO ACTION;

-- AddForeignKey
ALTER TABLE "draft_team_riders" ADD CONSTRAINT "draft_team_riders_team_id_fkey" FOREIGN KEY ("team_id") REFERENCES "draft_team"("id") ON DELETE NO ACTION ON UPDATE NO ACTION;

-- AddForeignKey
ALTER TABLE "race_result" ADD CONSTRAINT "race_result_race_id_fkey" FOREIGN KEY ("race_id") REFERENCES "race"("id") ON DELETE NO ACTION ON UPDATE NO ACTION;

-- AddForeignKey
ALTER TABLE "Account" ADD CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Session" ADD CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Authenticator" ADD CONSTRAINT "Authenticator_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;
===== prisma/migrations/20250325172338_race_points/migration.sql =====
/*
  Warnings:

  - Added the required column `points` to the `race_result` table without a default value. This is not possible if the table is not empty.

*/
-- AlterTable
ALTER TABLE "race_result" ADD COLUMN     "points" INTEGER NOT NULL;
===== prisma/migrations/20250326171958_user_admin/migration.sql =====
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "admin" BOOLEAN NOT NULL DEFAULT false;
===== prisma/migrations/20250328125552_draftrider_to_rider_join/migration.sql =====
-- AddForeignKey
ALTER TABLE "draft_team_riders" ADD CONSTRAINT "draft_team_riders_rider_id_fkey" FOREIGN KEY ("rider_id") REFERENCES "rider"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
===== prisma/migrations/20250325165358_unique_index_draftteam/migration.sql =====
/*
  Warnings:

  - A unique constraint covering the columns `[rider_id,user_id,team_id]` on the table `draft_team_riders` will be added. If there are existing duplicate values, this will fail.

*/
-- CreateIndex
CREATE UNIQUE INDEX "draft_team_riders_rider_id_user_id_team_id_key" ON "draft_team_riders"("rider_id", "user_id", "team_id");
===== prisma/migrations/20250326193825_race_result/migration.sql =====
/*
  Warnings:

  - You are about to drop the column `position` on the `race_result` table. All the data in the column will be lost.
  - Added the required column `title` to the `race_result` table without a default value. This is not possible if the table is not empty.

*/
-- AlterTable
ALTER TABLE "race_result" DROP COLUMN "position",
ADD COLUMN     "title" TEXT NOT NULL;
===== prisma/migrations/20250326202510_race_result/migration.sql =====
-- AddForeignKey
ALTER TABLE "race_result" ADD CONSTRAINT "race_result_rider_id_fkey" FOREIGN KEY ("rider_id") REFERENCES "rider"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
===== prisma/migrations/20250325172229_lock_draft_team/migration.sql =====
-- AlterTable
ALTER TABLE "draft_team" ADD COLUMN     "locked" BOOLEAN NOT NULL DEFAULT false;
===== prisma/migrations/20250326172549_team_score/migration.sql =====
-- AlterTable
ALTER TABLE "draft_team" ADD COLUMN     "score2025" INTEGER NOT NULL DEFAULT 0;
===== prisma/migrations/20250401182402_raceresult_unique/migration.sql =====
/*
  Warnings:

  - A unique constraint covering the columns `[race_id,sequence]` on the table `race_result` will be added. If there are existing duplicate values, this will fail.

*/
-- CreateIndex
CREATE UNIQUE INDEX "race_result_race_id_sequence_key" ON "race_result"("race_id", "sequence");
===== prisma/schema.prisma =====
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rider {
  id        Int     @id @default(autoincrement())
  name      String
  nameKey   String  @map("name_key")
  nation    String
  teamKey   String  @map("team_key")
  age       Int
  price2025 Int     @map("price_2025")
  score2025 Int     @map("score_2025")
  score2024 Int     @map("score_2024")
  type      Boolean
  results  RaceResult[]
  draftTeamRiders DraftTeamRiders[]

  @@map("rider")
}

model DraftTeam {
  id              Int               @id @default(autoincrement())
  name            String
  type            Boolean
  year            String
  user            User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId          String            @map("user_id")
  draftTeamRiders DraftTeamRiders[]
  locked          Boolean           @default(false)
  score2025       Int               @default(0)

  @@map("draft_team")
}

model DraftTeamRiders {
  id        Int       @id @default(autoincrement())
  riderId   Int       @map("rider_id")
  userId    String    @map("user_id")
  draftTeam DraftTeam @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teamId    Int       @map("team_id")
  rider    Rider  @relation(fields: [riderId], references: [id])

  @@map("draft_team_riders")

  @@unique([riderId, userId, teamId])
}

model Race {
  id         Int          @id @default(autoincrement())
  name       String
  nameKey    String       @map("name_key")
  nation     String
  date       DateTime
  type       Boolean
  category   String
  raceResult RaceResult[]

  @@map("race")
}

model RaceResult {
  id       Int  @id @default(autoincrement())
  riderId  Int  @map("rider_id")
  title    String
  sequence Int @default(0)
  points   Int
  race     Race @relation(fields: [raceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  raceId   Int  @map("race_id")
  rider    Rider  @relation(fields: [riderId], references: [id])

  @@map("race_result")
  @@unique([raceId, sequence])


}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  DraftTeam DraftTeam[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
===== prisma/seed.ts =====
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function rawSql() {
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (1, 'Adam Yates', 'GBR', 'UAE Team Emirates - XRG', 'adam-yates', 32, 20, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (2, 'Remco Evenepole', 'BEL', 'Soudal Quick-Step', 'remco-evenepole', 25, 30, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (3, 'Mathieu van der Poel', 'NED', 'Alpecin - Deceuninck', 'mathieu-van-der-poel', 30, 30, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (5, 'Wout van Aert', 'BEL', 'Jumbo - Visma', 'wout-van-aert', 27, 30, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (4, 'Tadej Pogacar', 'SLO', 'UAE Team Emirates - XRG', 'tadej-pogacar', 23, 50, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (6, 'Julian Alaphilippe', 'FRA', 'Soudal Quick-Step', 'julian-alaphilippe', 29, 2, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (7, 'Primoz Roglic', 'SLO', 'Jumbo - Visma', 'primoz-roglic', 31, 26, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (8, 'Egan Bernal', 'COL', 'Ineos Grenadiers', 'egan-bernal', 24, 4, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (9, 'Richard Carapaz', 'ECU', 'Ineos Grenadiers', 'richard-carapaz', 28, 10, 0, 0, false);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (10, 'Annemiek van Vleuten', 'NED', 'Movistar Team', 'annemiek-van-vleuten', 39, 20, 0, 0, true);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (11, 'Marianne Vos', 'NED', 'Jumbo - Visma', 'marianne-vos', 34, 30, 0, 0, true);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (12, 'Ellen van Dijk', 'NED', 'Trek - Segafredo', 'ellen-van-dijk', 34, 30, 0, 0, true);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (13, 'Lisa Brennauer', 'GER', 'Ceratizit - WNT', 'lisa-brennauer', 33, 30, 0, 0, true);`
  await prisma.$executeRaw`INSERT INTO public.rider (id, name, nation, team_key, name_key, age, price_2025, score_2025, score_2024, type) VALUES (14, 'Elisa Longo Borghini', 'ITA', 'Trek - Segafredo', 'elisa-longo-borghini', 30, 50, 0, 0, true);`

    await prisma.$executeRaw`INSERT INTO public.race (id, "name", name_key, nation, "date", "type", category) VALUES (2, 'Strade Bianche', 'strade-bianche', 'Italy', '2025-03-09 00:00:00.000', false, 'UCI World Tour');`
    await prisma.$executeRaw`INSERT INTO public.race (id, "name", name_key, nation, "date", "type", category) VALUES (3, 'Omloop Nieuwsblad', 'omloop-nieuwsbald', 'Belgium', '2025-03-08 00:00:00.000', false, 'UCI World Tour');`
    await prisma.$executeRaw`INSERT INTO public.race (id, "name", name_key, nation, "date", "type", category) VALUES (4, 'Tour De France Stage 1', 'tour-de-france-stage-1', 'France', '2025-07-05 00:00:00.000', false, 'UCI World Tour');`
    await prisma.$executeRaw`INSERT INTO public.race (id, "name", name_key, nation, "date", "type", category) VALUES (5, 'Paris-Nice', 'paris-nice', 'France', '2025-03-14 00:00:00.000', false, 'UCI World Tour');`
    await prisma.$executeRaw`INSERT INTO public.race (id, "name", name_key, nation, "date", "type", category) VALUES (6, 'Milano-Sanremo', 'milan-sanremo', 'Italy', '2025-03-21 00:00:00.000', false, 'UCI World Tour');`

    await prisma.$executeRaw`INSERT INTO public.race (id, "name", name_key, nation, "date", "type", category) VALUES (7, 'Strade Bianch-Donne', 'strade-bianche-donne', 'Italy', '2025-03-09 00:00:00.000', true, 'WWT');`
    await prisma.$executeRaw`INSERT INTO public.race (id, "name", name_key, nation, "date", "type", category) VALUES (8, 'Milano-Sanremo-Donne', 'milan-sanremo-donne', 'Italy', '2025-03-21 00:00:00.000', true, 'WWT');`
}

rawSql()
  .catch(e => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
